/****************************************************************
Nombre: Sara García
Materia: Sistemas Operativos
Fecha: 24 de Octubre de 2024
Tópico: productor-consumidor POSIX
****************************************************************/
//Librerías
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <pthread.h>

//Declaración de variables
int counter = 0;
int max = 4;

pthread_mutex_t counter_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t condp_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t condc_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t condVarProd = PTHREAD_COND_INITIALIZER;
pthread_cond_t condVarCons = PTHREAD_COND_INITIALIZER;

void *productor();
void *consumidor();

int main() {
    //Arreglos que almacenan identificadores de los hilos productores y consumidores 
    pthread_t proHilo[max], conHilo[max];
    int i;

    //Creación de hilos
    for (i = 0; i < max; i++) {
        pthread_create(&proHilo[i], NULL, &productor, NULL);
        pthread_create(&conHilo[i], NULL, &consumidor, NULL);
    }

    for (i = 0; i < max; i++) {
        pthread_join(proHilo[i], NULL);
        pthread_join(conHilo[i], NULL);
    }

    return 0;
}

void *productor() {
//Bucle infinito para los productores 
    while (1) {
        pthread_mutex_lock(&condp_mutex);
        //El productor espera si es igual o mayor a 10 
        while (counter >= 10) {
            pthread_cond_wait(&condVarProd, &condp_mutex);
        }
        pthread_mutex_unlock(&condp_mutex);

        pthread_mutex_lock(&counter_mutex);
        
        //Se incrementa el contador
        counter++;

        //Se señala a los cnsumidores que pueden consumir
        pthread_cond_signal(&condVarCons);
        printf("Soy productor %lu valor contador = %d\n", (unsigned long)pthread_self(), counter);

        //Se desbloquea el mutex del contador
        pthread_mutex_unlock(&counter_mutex);

        if (counter == 5) {
        //El productor duerme por 1seg si el contador es igual a 5
            sleep(1);
        }
    }
}

void *consumidor() {
//Bucle infinito para los consumidores
    while (1) {
        sleep(1);
        pthread_mutex_lock(&condc_mutex);
        pthread_cond_signal(&condVarProd);
        pthread_cond_wait(&condVarCons, &condc_mutex);
        pthread_mutex_unlock(&condc_mutex);
          
        pthread_mutex_lock(&counter_mutex);
        if (counter > 0) {
        //Si el contador es mayor que cero, el consumidor puede consumir
            printf("Soy consumidor %lu valor contador = %d\n", (unsigned long)pthread_self(), counter);

            //Se decrementa el contador
            counter--;

            //Se señalan los productores que pueden producir nuevamente
            pthread_cond_signal(&condVarProd);
        }
        //Se desbloquea el mutex del contador
        pthread_mutex_unlock(&counter_mutex);
    }
}
